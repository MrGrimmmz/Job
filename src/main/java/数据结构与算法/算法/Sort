package 数据结构与算法.算法;import java.util.Arrays;/** * @Author ifcc * @Date 2018-03-25 * @School SouthEast University * @Verstion 1.0 **/public class Sort {    /**     * 冒泡排序     * @param array     */    public static void bubbleSort(int[] array){        if (array==null||array.length==1){            return;        }        boolean flag=false;        for (int i=0;i<array.length;i++){                flag=false;                for(int j=array.length-1;j>i;j--){                    if (array[j]<array[j-1]){                        int temp=array[j];                        array[j]=array[j-1];                        array[j-1]=temp;                        flag=true;                    }                }                if (!flag){                    return;                }        }    }    /**     * 选择排序     * @param array     */    public static void selectSort(int[] array){        for (int i=0;i<array.length;i++){            int temp=i;            for (int j=i+1;j<array.length;j++){                if (array[j]<array[temp]){                    temp=j;                }            }            int tempValue=array[i];            array[i]=array[temp];            array[temp]=tempValue;        }    }    /**     * 插入排序     * @param array     */    public static void insertSort(int[] array){        if (array==null||array.length==1){            return;        }        for(int i=1;i<array.length;i++){            int tempValue=array[i];            int j=i-1;            while (j>=0 && array[j]>tempValue){                array[j+1]=array[j];                j--;            }            array[j+1]=tempValue;        }    }    /**     * 基数排序     * @param array     */    public static void asicSort(int[] array){    }    public static void quick(int[] array){        if (array==null||array.length==1){            return;        }        quickSort(array,0,array.length-1);    }    public static void quickSort(int[] array,int low,int high){        if (low<high){            int middle=getMiddle(array,low,high);            quickSort(array,low,middle-1);            quickSort(array,middle+1,high);        }    }    public static int getMiddle(int[] array,int low,int high){        int temp=array[low];        while (low<high){            while (low<high&&array[high]>=temp){                high--;            }            array[low]=array[high];            while (low<high&&array[low]<=temp){                low++;            }            array[high]=array[low];        }        array[low]=temp;        return low;    }    public static void shellSort(int[] array){        int len=array.length/2;        while (len>=1){            for (int i=len;i<array.length;i++){                int temp=array[i];                int j=i-len;                while (j>=0&&array[j]>temp){                    array[j+len]=array[j];                    j-=len;                }                array[j+len]=temp;            }            len=len/2;        }    }    public static void mergeSort(int[] array,int left,int right){            if (left<right){                int mid=(left+right)>>1;                mergeSort(array,left,mid);                mergeSort(array,mid+1,right);                merge(array,left,mid,right);            }    }    public static void merge(int[] array,int left,int mid,int right){        int[] tempArray=new int[array.length];        int rightStart=mid+1;        int temp=left;        int third=left;        while (left<=mid&&rightStart<=right){            if (array[left]<=array[rightStart]){                tempArray[third++]=array[left++];            }else {                tempArray[third++]=array[rightStart++];            }        }        while (left<=mid){            tempArray[third++]=array[left++];        }        while (rightStart<=right){            tempArray[third++]=array[rightStart++];        }        while (temp<=right){            array[temp]=tempArray[temp];            temp++;        }    }    public static void heapSort(int[] array){        if (array==null||array.length<=1){            return;        }        buildMaxHeap(array);        for (int i=array.length-1;i>=1;i--){            exchangeElements(array,0,i);            maxHeap(array,i,0);        }    }    public static void buildMaxHeap(int[] array){        if (array==null||array.length<=1){            return;        }        int half=(array.length-1)>>1;        for (int i=half;i>=0;i--){            maxHeap(array,array.length,i);        }    }    public static void maxHeap(int[] array,int heapSize,int index){        int left=index*2+1;        int right=index*2+2;        int largest=index;        if (left<heapSize&&array[left]>array[index]){            largest=left;        }        if (right<heapSize&&array[right]>array[largest]){            largest=right;        }        if (largest!=index){            exchangeElements(array,largest,index);            maxHeap(array,heapSize,largest);        }    }    public static void exchangeElements(int[] array,int index1,int index2){        int temp=array[index1];        array[index1]=array[index2];        array[index2]=temp;    }    public static void main(String[] args){        int[] array={2,4,6,1,5,7,3,4,3,5,9};        heapSort(array);//        mergeSort(array,0,array.length-1);        System.out.println(Arrays.toString(array));    }}